using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Security.Cryptography;
using System.Text;

namespace UmbracoMemberHandling.Helpers
{
	public class TokenHelper
	{
		// Generates a random string of a given length 
		public string GetUniqueToken(int length )
		{
			// The valid characters to appear in the string 
			string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";

			using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())
			{
				byte[] data = new byte[length];

				// If chars.Length isn't a power of 2 then there is a bias if we simply use the modulus operator. The first characters of chars will be more probable than the last ones.
				// buffer used if we encounter an unusable random byte. We will regenerate it in this buffer
				byte[] buffer = null;

				// Maximum random number that can be used without introducing a bias
				int maxRandom = byte.MaxValue - ((byte.MaxValue + 1) % chars.Length);

				crypto.GetBytes(data);

				char[] result = new char[length];

				for (int i = 0; i < length; i++)
				{
					byte value = data[i];

					while (value > maxRandom)
					{
						if (buffer == null)
						{
							buffer = new byte[1];
						}

						crypto.GetBytes(buffer);
						value = buffer[0];
					}

					result[i] = chars[value % chars.Length];
				}

				return new string(result);
			}
		}
	
		public string GetHash(string rawData)
		{
			using (SHA256 sha256Hash = SHA256.Create())
			{
				byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));

				// Convert byte array to a string
				StringBuilder builder = new StringBuilder();

				for (int i=0; i< bytes.Length; i++)
				{
					builder.Append(bytes[i].ToString("x2"));
				}

				return builder.ToString();
			}
		}



	}
}
